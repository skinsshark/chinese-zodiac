{"version":3,"sources":["inputs/YearInput.js","Year.js","inputs/MonthInput.js","inputs/DayInput.js","MonthDay.js","Result.js","App.js","serviceWorker.js","index.js"],"names":["YEAR_LENGTH","NUMBERS","YearInput","props","digits","numbersStr","Array","from","map","number","join","chineseNumbers","year","autoFocus","value","type","maxLength","placeholder","onChange","e","target","setYear","length","slice","Year","history","useHistory","disabled","onClick","push","MONTH_LENGTH","MonthInput","month","setMonth","DAY_LENGTH","DayInput","day","setDay","MonthDay","className","goBack","Result","birthday","animals","data","console","log","rat","character","emoji","role","aria-label","genFullBirthday","App","useState","clearBirthday","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e905628c.chunk.js","sourcesContent":["import React from 'react';\nimport './Input.css';\n\nconst YEAR_LENGTH = 4;\nconst NUMBERS = [\"Èõ∂\", \"‰∏Ä\", \"‰∫å\", \"‰∏â\", \"Âõõ\", \"‰∫î\", \"ÂÖ≠\", \"‰∏É\", \"ÂÖ´\", \"‰πù\"];\n\nfunction limitInputLength(value, setYear) {\n  if (value.length > YEAR_LENGTH) {\n    setYear(value.slice(0, YEAR_LENGTH))\n  } else {\n    setYear(value)\n  }\n}\n\nfunction chineseNumbers(digits) {\n  const arr = Array.from(digits);\n  const numbersStr = arr.map(number => NUMBERS[number])\n\n  return <header><h4>{numbersStr.join('')}</h4></header>\n}\n\nfunction YearInput(props) {\n  return (\n    <div>\n      {chineseNumbers(props.year)}\n      <input\n        autoFocus={true}\n        value={props.year}\n        type=\"number\"\n        maxLength={YEAR_LENGTH}\n        placeholder=\"ËæìÂÖ•Âá∫ÁîüÂπ¥\"\n        onChange={(e) => limitInputLength(e.target.value, props.setYear)}\n      />\n    </div>\n  );\n}\n\nexport default YearInput;\n","import React from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport YearInput from './inputs/YearInput';\nimport './inputs/Input.css';\n\nfunction Year(props) {\n  const {year, setYear} = props;\n  const history = useHistory();\n\n  function nextPage() {\n    history.push(\"/almost\");\n  }\n\n  return (\n    <main>\n      <YearInput year={year} setYear={setYear} />\n      <h3>Enter your birth year</h3>\n      <button disabled={year.length !== 4 || year < 1920 || year > 2020} onClick={nextPage}>&rarr;</button>\n    </main>\n  );\n}\n\nexport default Year;\n","import React from 'react';\nimport './Input.css';\n\nconst MONTH_LENGTH = 2;\nconst NUMBERS = [\"Èõ∂\",\"‰∏Ä\",\"‰∫å\",\"‰∏â\",\"Âõõ\",\"‰∫î\",\"ÂÖ≠\",\"‰∏É\",\"ÂÖ´\",\"‰πù\"];\n\nfunction limitInputLength(value, setMonth) {\n  if (value.length > MONTH_LENGTH) {\n    setMonth(value.slice(0, MONTH_LENGTH))\n  } else {\n    setMonth(value)\n  }\n}\n\nfunction chineseNumbers(digits) {\n  const arr = Array.from(digits);\n  const numbersStr = arr.map(number => NUMBERS[number])\n\n  return <header><h4>{numbersStr.join('')}</h4></header>\n}\n\nfunction MonthInput(props) {\n  return (\n    <div>\n      {chineseNumbers(props.month)}\n      <input\n        autoFocus={true}\n        value={props.month}\n        type=\"number\"\n        maxLength={MONTH_LENGTH}\n        placeholder=\"Êúà‰ªΩ\"\n        onChange={(e) => limitInputLength(e.target.value, props.setMonth)}\n      />\n    </div>\n  );\n}\n\nexport default MonthInput;\n","import React from 'react';\nimport './Input.css';\n\nconst DAY_LENGTH = 2;\nconst NUMBERS = [\"Èõ∂\",\"‰∏Ä\",\"‰∫å\",\"‰∏â\",\"Âõõ\",\"‰∫î\",\"ÂÖ≠\",\"‰∏É\",\"ÂÖ´\",\"‰πù\"];\n\nfunction limitInputLength(value, setDay) {\n  if (value.length > DAY_LENGTH) {\n    setDay(value.slice(0, DAY_LENGTH))\n  } else {\n    setDay(value)\n  }\n}\n\nfunction chineseNumbers(digits) {\n  const arr = Array.from(digits);\n  const numbersStr = arr.map(number => NUMBERS[number])\n\n  return <header><h4>{numbersStr.join('')}</h4></header>\n}\n\nfunction DayInput(props) {\n  return (\n    <div>\n      {chineseNumbers(props.day)}\n      <input\n        value={props.day}\n        type=\"number\"\n        maxLength={DAY_LENGTH}\n        placeholder=\"Êó•Â≠ê\"\n        onChange={(e) => limitInputLength(e.target.value, props.setDay)}\n      />\n    </div>\n  );\n}\n\nexport default DayInput;\n","import React from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport MonthInput from './inputs/MonthInput';\nimport DayInput from './inputs/DayInput';\nimport './inputs/Input.css';\n\nfunction MonthDay(props) {\n  const {month, setMonth, day, setDay} = props;\n  const history = useHistory();\n\n  function prevPage() {\n    history.goBack();\n  }\n\n  function nextPage() {\n    history.push(\"/result\");\n  }\n\n  return (\n    <main>\n      <section className=\"month-day\">\n        <article>\n          <MonthInput\n            month={month}\n            setMonth={setMonth}\n          />\n          <h3>Month</h3>\n        </article>\n        <article>\n          <DayInput\n            day={day}\n            setDay={setDay}\n          />\n          <h3>Day</h3>\n        </article>\n      </section>\n      <button\n        className=\"back\"\n        onClick={prevPage}\n      >&larr;</button>\n      <button\n        disabled={month.length < 1 || day.length < 1 || month < 1 || month > 12 || day < 1 || day > 31}\n        className=\"forward\"\n        onClick={nextPage}\n      >&rarr;</button>\n    </main>\n  );\n}\n\nexport default MonthDay;\n","import React from 'react';\n// import { Link } from \"react-router-dom\";\nimport './Result.css';\nimport data from './animals.json';\n\nfunction Result(props) {\n  const {birthday} = props;\n  const {animals} = data;\n\n  console.log(animals.rat.character)\n  console.log(animals.rat.emoji)\n  // const {birthday, clearBirthday} = props;\n  // const history = useHistory();\n\n  // function restart() {\n    // history.goBack();\n    // <h4>{birthday.year}/{birthday.month}/{birthday.day}</h4>\n  // }\n\n  // <Link to=\"/\" onClick={clearBirthday}>\n  //   <button>&larr;&larr;</button>\n  // </Link>\n\n  return (\n    <div className=\"result\">\n      <h5>{birthday.year}/{birthday.month}/{birthday.day}</h5>\n      <div className=\"ani\">\n        <div className=\"moji\">\n          <span role=\"img\" aria-label=\"tiger\">üêÖ</span>\n          <span role=\"img\" aria-label=\"tiger\">üêÖ</span>\n          <span role=\"img\" aria-label=\"tiger\">üêÖ</span>\n        </div>\n        <div className=\"text\">Ëôé</div>\n        <div className=\"moji right\">\n          <span role=\"img\" aria-label=\"tiger\">üêÖ</span>\n          <span role=\"img\" aria-label=\"tiger\">üêÖ</span>\n          <span role=\"img\" aria-label=\"tiger\">üêÖ</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Result;\n","import React from 'react';\nimport {useState} from 'react';\nimport { MemoryRouter, Route } from 'react-router';\nimport Year from './Year';\nimport MonthDay from './MonthDay';\nimport Result from './Result';\nimport './App.css';\n\nfunction genFullBirthday(year, month, day) {\n  return {\n    year,\n    month,\n    day,\n  }\n}\n\nfunction App() {\n  const [year, setYear] = useState('');\n  const [month, setMonth] = useState('');\n  const [day, setDay] = useState('');\n\n  function clearBirthday() {\n    setYear('');\n    setMonth('');\n    setDay('');\n  }\n\n  return (\n    <MemoryRouter>\n      <Route\n        exact\n        path=\"/\"\n        render={() => <Year year={year} setYear={setYear} />}\n      />\n      <Route\n        path=\"/almost\"\n        render={() => (\n          <MonthDay\n            month={month}\n            setMonth={setMonth}\n            day={day}\n            setDay={setDay}\n          />\n        )}\n      />\n      <Route\n        path=\"/result\"\n        render={() => (\n          <Result\n            birthday={genFullBirthday(year, month, day)}\n            clearBirthday={clearBirthday}\n          />\n        )}\n      />\n    </MemoryRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}